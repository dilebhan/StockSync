spring.datasource.url=jdbc:mysql://localhost:3306/stocksync?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# MySQL query to create the Contacts table:
#
# CREATE TABLE Contacts (
#   ContactID BINARY(16) PRIMARY KEY,
#   Name VARCHAR(255) NOT NULL,
#   Type INT NOT NULL, -- 1 = Customer, 2 = Vendor
#   Mobile VARCHAR(32),
#   Email VARCHAR(255),
#   Address TEXT,
#   CreatedTime BIGINT,
#   UpdatedTime BIGINT
# );

# MySQL queries to create the required tables:

# Items Table
# CREATE TABLE Items (
#   ItemID BINARY(16) PRIMARY KEY,
#   ItemName VARCHAR(255) NOT NULL,
#   Description TEXT,
#   UnitPrice DECIMAL(15,2),
#   CostPrice DECIMAL(15,2),
#   UnitValue DECIMAL(15,2),
#   UnitType VARCHAR(64),
#   CreatedTime BIGINT,
#   UpdatedTime BIGINT
# );

# InvoicesTable
# CREATE TABLE InvoicesTable (
#   InvoiceID BINARY(16) PRIMARY KEY,
#   ContactID BINARY(16),
#   InvoiceNumber VARCHAR(64),
#   InvoiceDate DATE,
#   DueDate DATE,
#   BilllingAddress TEXT,
#   ShippingAddress TEXT,
#   TotalAmount DECIMAL(15,2),
#   Status VARCHAR(32),
#   CreatedTime BIGINT,
#   UpdatedTime BIGINT,
#   FOREIGN KEY (ContactID) REFERENCES Contacts(ContactID)
# );

# InvoiceItemsTable
# CREATE TABLE InvoiceItemsTable (
#   InvoiceItemID BINARY(16) PRIMARY KEY,
#   InvoiceID BINARY(16),
#   ItemID BINARY(16),
#   ItemName VARCHAR(255),
#   Quantity DECIMAL(15,2),
#   UnitPrice DECIMAL(15,2),
#   CreatedTime BIGINT,
#   UpdatedTime BIGINT,
#   FOREIGN KEY (InvoiceID) REFERENCES InvoicesTable(InvoiceID),
#   FOREIGN KEY (ItemID) REFERENCES Items(ItemID)
# );

# BillsTable
# CREATE TABLE BillsTable (
#   BillID BINARY(16) PRIMARY KEY,
#   ContactID BINARY(16),
#   BillNumber VARCHAR(64),
#   BillDate DATE,
#   DueDate DATE,
#   BilllingAddress TEXT,
#   TotalAmount DECIMAL(15,2),
#   Status VARCHAR(32),
#   CreatedTime BIGINT,
#   UpdatedTime BIGINT,
#   FOREIGN KEY (ContactID) REFERENCES Contacts(ContactID)
# );

# BillItemsTable
# CREATE TABLE BillItemsTable (
#   BillItemID BINARY(16) PRIMARY KEY,
#   BillID BINARY(16),
#   ItemID BINARY(16),
#   ItemName VARCHAR(255),
#   Quantity DECIMAL(15,2),
#   UnitPrice DECIMAL(15,2),
#   CreatedTime BIGINT,
#   UpdatedTime BIGINT,
#   FOREIGN KEY (BillID) REFERENCES BillsTable(BillID),
#   FOREIGN KEY (ItemID) REFERENCES Items(ItemID)
# );

# Locations
# CREATE TABLE Locations (
#   LocationID BINARY(16) PRIMARY KEY,
#   LocationName VARCHAR(255) NOT NULL,
#   Address TEXT,
#   State VARCHAR(64),
#   PostalCode VARCHAR(32),
#   Country VARCHAR(64),
#   CreatedTime BIGINT,
#   UpdatedTime BIGINT
# );

# LocationMappingTable
# CREATE TABLE LocationMappingTable (
#   MappingID BINARY(16) PRIMARY KEY,
#   ItemID BINARY(16),
#   LocationID BINARY(16),
#   AvailableQuantity DECIMAL(15,2),
#   MinimumQuantity DECIMAL(15,2),
#   CreatedTime BIGINT,
#   UpdatedTime BIGINT,
#   FOREIGN KEY (ItemID) REFERENCES Items(ItemID),
#   FOREIGN KEY (LocationID) REFERENCES Locations(LocationID)
# );

# -------------------------------
# How to run this Spring Boot project:
#
# 1. Ensure MySQL is running and the 'stocksync' database exists:
#    CREATE DATABASE stocksync;
#
# 2. Update the datasource username and password above if needed.
#
# 3. Build the project:
#    ./mvnw clean package
#
# 4. Run the application:
#    ./mvnw spring-boot:run
#    or
#    java -jar target/*.jar
#
# 5. The API will be available at http://localhost:8080/
#
# 6. Test endpoints using curl, Postman, or any REST client.
#
# 7. Logs and SQL output will appear in the console.
# -------------------------------

# -------------------------------
# How to build this Spring Boot project:
#
# 1. Open a terminal and navigate to your project directory:
#    cd /Users/dilebhan-19558/Documents/stocksync
#
# 2. Build the project using Maven:
#    ./mvnw clean package
#    (or, if you have Maven installed globally:)
#    mvn clean package
#
# 3. The built JAR will be in the target/ directory.
#
# 4. To run the application:
#    ./mvnw spring-boot:run
#    (or)
#    java -jar target/*.jar
# -------------------------------

# -------------------------------
# How to install Maven:
#
# 1. Download Maven from https://maven.apache.org/download.cgi
#
# 2. Extract the archive to a directory of your choice.
#
# 3. Add Maven's 'bin' directory to your PATH environment variable.
#
#    Example (Linux/macOS):
#      export PATH=/path/to/apache-maven-x.x.x/bin:$PATH
#
#    Example (Windows):
#      Set the PATH variable in System Properties to include Maven's bin directory.
#
# 4. Verify installation:
#      mvn -v
#    You should see Maven version info.
#
# Note: If your project includes the 'mvnw' or 'mvnw.cmd' wrapper scripts,
# you do not need to install Maven globally?just use './mvnw' or 'mvnw.cmd'.
# -------------------------------

